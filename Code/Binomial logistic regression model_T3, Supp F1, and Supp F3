library(tidyverse)
library(caret)
library(GGally)
library(ggplot2)
library(corrplot)
library(projpred)
library(janitor)
library(readr)
library(stargazer) #We have to library the package every time we use
library(tigerstats)
library(MASS)
library(titanic)
library(Amelia)
library(dplyr)
library(modeest)
library(ggplot2)
library(cowplot)
library(mice)
library(caTools)
library(caret)
SEED=123

# Upload the data

BLR_SB <- read.csv("C:/Users/jaeyoung.hwang/Desktop/USDA/2023/Project/SwitchingBehavior/Data/powdery_mildew_fungicide_record_database_SB_V7_Working.csv", check.names=FALSE)

str(BLR_SB)

# Standardized value for continuous variable


for (i in 1:8) {
 BLR_SB[i] <- scale(BLR_SB[i])
}


# Factor

BLR_SB$change <- as.factor(BLR_SB$change)
BLR_SB$pruning <- as.factor(BLR_SB$pruning)
BLR_SB$susceptibility.to.r6.Strains <- as.factor(BLR_SB$susceptibility.to.r6.Strains)
BLR_SB$susceptibility.to.nonr6.Strains <- as.factor(BLR_SB$susceptibility.to.nonr6.Strains)
BLR_SB$year <- as.factor(BLR_SB$year)
BLR_SB$Grower <- as.factor(BLR_SB$Grower)

# Binary logistic regression model

change_m <- glm(change ~ spray.date + first.spray.date + mildew.incidence + disease.in.may + flagshoot + previous.flagshoot +  synthetic + nonsynthetic + 
                  pruning + susceptibility.to.r6.Strains + susceptibility.to.nonr6.Strains +
                  + year + Grower, data = BLR_SB, family = binomial())

# Table 3. Binary logistic regression model result
# print results
summary(change_m)

library(lmtest)
lrtest(change_m)

#calculate McFadden's R-squared for model
with(summary(change_m), 1 - deviance/null.deviance)


# Variable importance

library(Boruta)

boruta_output <- Boruta(BLR_SB$change ~ spray.date + first.spray.date + mildew.incidence + disease.in.may + flagshoot + previous.flagshoot +  synthetic + nonsynthetic + 
                          pruning + susceptibility.to.r6.Strains + susceptibility.to.nonr6.Strains + year + Grower, data = BLR_SB, doTrace = 2
                          )

# Table 3. variable importance
boruta_output

rough_fix_mod <- TentativeRoughFix(boruta_output)
boruta_signif <- getSelectedAttributes(rough_fix_mod)
boruta_signif

importances <- attStats(rough_fix_mod)
importances <- importances[importances$decision != "Rejected", c("meanImp", "decision")]
importances[order(-importances$meanImp), ]

# window in inches 
plot(boruta_output, ces.axis = 0.7, las = 2, xlab = "", main = "Feature importance", res = 1000)

# Stepwise

# Perform stepwise logistic regression
step.model <- stepAIC(change_m, direction="both", trace = FALSE)

# # Table 3. Summarize the final selected model
summary(step.model)

lrtest(step.model)

#calculate McFadden's R-squared for model
with(summary(step.model), 1 - deviance/null.deviance)

# Supp Figure. 3
probs <- predict(step.model, newdata = BLR_SB, type = "response")
pred <- ifelse(probs > 0.5, 1, 0)

confusionMatrix(factor(pred), factor(BLR_SB$change), positive = as.character(1))

# Create the ROC curve
roc_obj <- roc(BLR_SB$change, probs)

# Plot the ROC curve
plot(roc_obj, main = "ROC Curve for the Logistic Regression Model")
abline(0, 1, lty = 2, col = "gray")  # Add a reference line for a random classifier

# Supplemental Figure 3. ROC and Stepwise
# Calculate the AUC
auc_value <- auc(roc_obj)
cat("AUC:", auc_value, "\n")

# Extract unique predicted probabilities
thresholds <- unique(probs)

# Sort the thresholds in descending order
thresholds <- sort(thresholds, decreasing = TRUE)

# Initialize empty vectors for TPR and FPR
tpr <- numeric(length(thresholds))
fpr <- numeric(length(thresholds))

# Calculate TPR and FPR for each threshold
for (i in seq_along(thresholds)) {
  
  threshold <- thresholds[i]
  
  # Classify observations based on the current threshold
  predicted_classes <- as.integer(probs >= threshold)
  
  # Create a confusion matrix
  cm <- table(Predicted = predicted_classes, 
              Actual = BLR_SB$change)
  
  # Calculate TPR and FPR
  if(sum(dim(cm))==4){
    tpr[i] <- cm["1", "1"] / (cm["1", "1"] + cm["0", "1"])
    fpr[i] <- cm["1", "0"] / (cm["1", "0"] + cm["0", "0"])
  }
  
}

# Create a data frame for plotting
roc_df <- data.frame(Threshold = thresholds, TPR = tpr, FPR = fpr)

# Create the ROC plot
roc_plot <- ggplot(roc_df, aes(x = FPR, y = TPR)) +
  geom_point(size = 2, color = "red") +  # Add points (dots)
  geom_line(color = "blue", size = 1) +  # Connect the points with lines
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
  labs(
    title = "ROC Curve for the Logistic Regression Model",
    x = "False Positive Rate (1 - Specificity)",
    y = "True Positive Rate (Sensitivity)"
  ) +
  theme_minimal() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                          panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('roc_plot.jpg', dpi = 1000, height = 6, width = 8, unit = 'in')

# Display the plot
print(roc_plot)

library(blorr)
gt <- blr_gains_table(step.model)
blr_ks_chart(gt) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                         panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('ks_step.jpg', dpi = 1000, height = 6, width = 8, unit = 'in')

# Table 3. Variable importance

boruta_output <- Boruta(BLR_SB$change ~ spray.date + first.spray.date + mildew.incidence + disease.in.may +  synthetic + nonsynthetic + 
                         year + Grower, data = BLR_SB, doTrace = 2
)
boruta_output

rough_fix_mod <- TentativeRoughFix(boruta_output)
boruta_signif <- getSelectedAttributes(rough_fix_mod)
boruta_signif

importances <- attStats(rough_fix_mod)
importances <- importances[importances$decision != "Rejected", c("meanImp", "decision")]
importances[order(-importances$meanImp), ]

# window in inches 
plot(boruta_output, ces.axis = 0.7, las = 2, xlab = "", main = "Feature importance", res = 1000)


# Supp Figure 1. VIF
BLR_SB <- as.data.frame(BLR_SB[1 : 13])
BLR_SB <- as.matrix(BLR_SB[,])

colnames(BLR_SB) <- c('Spray_date', 'First_spray_date', 'Disease_incidence', 
                      'Flag_shoot_incidence', 'Previous_flag_shoot_incidence', 
                      'Synthetic','Non_synthetic','Disease_in_May',
                      'Pruning_thoroughness', 'Susceptibility_V6_strains',
                      'Susceptibility_non_V6_strains', 'Year', 'change')

BLR_SB <- as.data.frame(BLR_SB)

model <- glm(change ~ Spray_date + First_spray_date + Susceptibility_V6_strains + Susceptibility_non_V6_strains +
               + Pruning_thoroughness + Disease_incidence + Flag_shoot_incidence + Previous_flag_shoot_incidence + Synthetic + Non_synthetic + Year + Disease_in_May, data = BLR_SB, family = "binomial")

library(car)

vif_results <- car::vif(model)

print(vif_results)

# Convert VIF results to a data frame for plotting
vif_df <- data.frame(Variable = names(vif_results), VIF = vif_results)

# Set a threshold to indicate high VIF
high_vif_threshold <- 5

# Supplemental Figure 1. VIF
# Create a ggplot bar plot to visualize VIF values
ggplot(vif_df, aes(x = Variable, y = VIF)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_hline(yintercept = high_vif_threshold, linetype = "dashed", color = "red") +
  scale_y_continuous(limits = c(0, max(vif_df$VIF) + 1)) +
  labs(#title = "Variance Inflation Factor (VIF) for Regression Model",
    y = "Variance Inflation Factor",
    x = "Variable") +
  theme_minimal() + coord_flip() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                                                                   panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('VIF.jpg', dpi = 1000, height = 5, width = 7, unit = 'in')

